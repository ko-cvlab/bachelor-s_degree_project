# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_csf.ipynb (unless otherwise specified).

__all__ = ['CircularSeparabilityFilter']

# Cell
from .core import *
#from core import *
import cv2 as cv
import numpy as np
from skimage.feature import peak_local_max

# Cell
class CircularSeparabilityFilter:
    def __init__(self, r_in, r_out):
        self.r_in = r_in
        self.r_out = r_out

    def __call__(self, img):
        return seperability_filter(img, (self.r_in, self.r_in), (self.r_out, self.r_out), angle=0)

    def find_circles(self, img, num_circles=None):#分離度に関する極大値を返す
        sepmap = seperability_filter(img, (self.r_in, self.r_in), (self.r_out, self.r_out), angle=0)
        sepmap[np.isnan(sepmap)]=0#欠損値を0に修正
        peaks = peak_local_max(sepmap)#局所的な極大値を検出

        if num_circles is None:
            return peaks
        else:
            return peaks[:num_circles]#num_circles番目までの要素を取り出す
        
    def clop_circles(self, img, circles):
        cx= circles[0][0]
        cy= circles[0][1]
        a = self.r_out 
        b = self.r_out
        
        
        center = [cx,cy]
        axes = [a,b]
        angle=0
        
        width = img.shape[0]
        height = img.shape[1]
        mask = np.zeros((width, height), np.uint8)

        circle_img = cv.ellipse(mask, box=(center,axes,angle), color=(255,255,255), thickness=-1)
        
        #rectangle_img = cv.rectangle(mask, pt1=(cx-b,cy-b),pt2=(cx+b,cy+b),color=(255,255,255),thickness=-1)
        #↑長方形を描画、axesが半径！！thicknessがマイナスだと中を塗る
        #masked_data = cv.bitwise_and(img, img, mask=rectangle_img)
        masked_data = cv.bitwise_and(img, img, mask=circle_img)
        
        return masked_data
    
    

    def cut_img_1(self, img, circles):#完成
        num = len(circles)
        a = self.r_out 
        b = self.r_out
        n=0
        datas=[]
        x_circles = circles[n]
        cx= x_circles[0]
        cy= x_circles[1]
        data = img[cx-b:cx+b , cy-b:cy+b] #抽出した画像

        return data

    def cut_img_2(self, img, circles):
        num = len(circles)
        a = self.r_out 
        b = self.r_out
        n=0
        datas=[]
        #img =cv.copyMakeBorder(img, 50, 50, 50, 50, cv.BORDER_CONSTANT)#余白を付け足す、デフォルト黒
        for n in range(num):
            x_circles = circles[n]
            cx= x_circles[0]
            cy= x_circles[1]
            #data = img[50+cx-2*b:50+cx+2*b , 50+cy-2*b:50+cy+2*b]
            data = img[int(cx-1.5*b):int(cx+1.5*b) , int(cy-1.5*b):int(cy+1.5*b)]
            #↑抽出した画像,カットする画像を、円の中心から、2*r_outh離れたところまでを取り出す
            data_expanded = np.expand_dims(data,axis=0)
            datas.append(data_expanded)
        
        # (n_samples,height,width,channels)
        image_datas = np.concatenate(datas,axis=0)
        
        return image_datas


    
    
    
    
    
    